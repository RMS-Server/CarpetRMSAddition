name: Release
on:
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: write
  
jobs:
  Get-Versions:
    runs-on: ubuntu-24.04
    outputs:
      versions: ${{ steps.Get_Versions.outputs.versions }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Get Minecraft Versions
        id: Get_Versions
        run: |
          VERSIONS=$(find versions -maxdepth 1 -type d -name "[0-9]*.[0-9]*" | xargs -I {} basename {} | sort -V | jq -R . | jq -s -c .)
          echo "versions=$VERSIONS" >> $GITHUB_OUTPUT

  Build-Matrix:
    runs-on: ubuntu-24.04
    needs: Get-Versions
    strategy:
      matrix:
        minecraft_version: ${{ fromJson(needs.Get-Versions.outputs.versions) }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Validate Gradle Wrapper
        uses: gradle/actions/wrapper-validation@v4
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: '22'
          distribution: 'temurin'
      - name: Make Gradle Wrapper Executable
        run: chmod +x ./gradlew
      
      - name: Build For ${{ matrix.minecraft_version }}
        run: ./gradlew :${{ matrix.minecraft_version }}:build
      
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.minecraft_version }}
          path: versions/${{ matrix.minecraft_version }}/build/libs/*.jar
          if-no-files-found: error
  
  Publish-Modrinth-Matrix:
    runs-on: ubuntu-24.04
    needs: [Build-Matrix, Get-Versions, Generate-Changelog]
    strategy:
      matrix:
        minecraft_version: ${{ fromJson(needs.Get-Versions.outputs.versions) }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Extract Version Info
        id: Version_Info
        run: |
          MOD_VERSION=$(grep '^version=' gradle.properties | cut -d'=' -f2)
          MOD_ID=$(grep '^id=' gradle.properties | cut -d'=' -f2)
          
          echo "mod_version=$MOD_VERSION" >> $GITHUB_OUTPUT
          echo "mod_id=$MOD_ID" >> $GITHUB_OUTPUT
          echo "mod_name=Carpet RMS Addition" >> $GITHUB_OUTPUT
      
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-${{ matrix.minecraft_version }}
          path: versions/${{ matrix.minecraft_version }}/build/libs/
      

      - name: Publish To Modrinth
        if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
        uses: Kir-Antipov/mc-publish@v3.3
        with:
          modrinth-id: ${{ vars.MODRINTH_ID }}
          modrinth-token: ${{ secrets.MODRINTH_TOKEN }}

          files: |
            versions/${{ matrix.minecraft_version }}/build/libs/*.jar

          name: ${{ format('{0} v{1} for MC {2}', 
                 steps.Version_Info.outputs.mod_name, 
                 steps.Version_Info.outputs.mod_version,
                 matrix.minecraft_version) }}
          version: ${{ format('v{0}-mc{1}', 
                    steps.Version_Info.outputs.mod_version,
                    matrix.minecraft_version) }}
          version-type: release
          changelog: ${{ needs.Generate-Changelog.outputs.changelog }}

          loaders: fabric
          game-versions: |
            ${{ matrix.minecraft_version }}
          dependencies: |-
            carpet(required)
  
  Generate-Changelog:
    runs-on: ubuntu-24.04
    outputs:
      changelog: ${{ steps.Changelog.outputs.changelog }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Extract Version Info
        id: Version_Info
        run: |
          MOD_VERSION=$(grep '^version=' gradle.properties | cut -d'=' -f2)
          echo "mod_version=$MOD_VERSION" >> $GITHUB_OUTPUT
      
      - name: Generate Changelog From Commits
        id: Changelog
        run: |
          VERSION=${{ steps.Version_Info.outputs.mod_version }}
          CURRENT_TAG="v$VERSION"
          
          if git rev-parse "$CURRENT_TAG" >/dev/null 2>&1; then
            CHANGELOG=$(git log -1 --pretty=format:"%s")
          else
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            
            if [ -z "$LATEST_TAG" ]; then
              CHANGELOG=$(git log --pretty=format:"- %s" | head -10)
            else
              CHANGELOG=$(git log --pretty=format:"- %s" "$LATEST_TAG"..HEAD)
            fi
          fi
          
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="Initial release"
          fi
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  Github-Release:
    runs-on: ubuntu-24.04
    needs: [Build-Matrix, Generate-Changelog]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Extract Version Info
        id: Version_Info
        run: |
          MOD_VERSION=$(grep '^version=' gradle.properties | cut -d'=' -f2)
          MOD_ID=$(grep '^id=' gradle.properties | cut -d'=' -f2)
          
          echo "mod_version=$MOD_VERSION" >> $GITHUB_OUTPUT
          echo "mod_id=$MOD_ID" >> $GITHUB_OUTPUT
          echo "mod_name=Carpet RMS Addition" >> $GITHUB_OUTPUT
          
          GAME_VERSIONS=$(find versions -maxdepth 1 -type d -name "[0-9]*.[0-9]*" | xargs -I {} basename {} | sort -V | tr '\n' '\n')
          echo "game_versions<<EOF" >> $GITHUB_OUTPUT
          echo "$GAME_VERSIONS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
      
      - name: Reorganize Artifacts
        run: |
          mkdir -p versions
          for version_dir in artifacts/build-*/; do
            version=$(basename "$version_dir" | sed 's/build-//')
            mkdir -p "versions/$version/build/libs"
            cp "$version_dir"*.jar "versions/$version/build/libs/"
          done
          
          find versions -name "*.jar" -type f
      
      - name: Extract Version From Gradle Properties
        if: github.event_name == 'workflow_dispatch'
        id: Get_Version
        run: |
          VERSION=${{ steps.Version_Info.outputs.mod_version }}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      

      - name: Delete Existing Release And Tag If Exists
        if: github.event_name == 'workflow_dispatch'
        run: |
          VERSION=${{ steps.Get_Version.outputs.version }}
          
          if gh release view "v$VERSION" >/dev/null 2>&1; then
            gh release delete "v$VERSION" --yes
          else
            true
          fi
          
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            git push --delete origin "v$VERSION" || true
            git tag -d "v$VERSION" || true
          else
            true
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      

      - name: Create Release With Changelog
        if: github.event_name == 'workflow_dispatch'
        run: |
          VERSION=${{ steps.Get_Version.outputs.version }}
          
          gh release create "v$VERSION" \
            --title "Release v$VERSION" \
            --notes "${{ needs.Generate-Changelog.outputs.changelog }}" \
            versions/*/build/libs/*.jar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Upload Release Assets
        if: github.event_name == 'release'
        run: |
          gh release upload ${{ github.event.release.tag_name }} versions/*/build/libs/*.jar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}