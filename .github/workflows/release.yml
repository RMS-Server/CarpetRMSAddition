# Build and create release with artifacts
# Can be triggered manually or when a release is published

name: release
on:
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: write
  
jobs:
  # Matrix build and publish job - builds and publishes each version independently
  build-and-publish-matrix:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        minecraft_version: ["1.17.1", "1.20.1", "1.21.1", "1.21.4"]
    steps:
      - name: checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: validate gradle wrapper
        uses: gradle/actions/wrapper-validation@v4
      - name: setup jdk
        uses: actions/setup-java@v4
        with:
          java-version: '22'
          distribution: 'temurin'
      - name: make gradle wrapper executable
        run: chmod +x ./gradlew
      
      # Extract version info for publishing
      - name: extract version info
        id: version_info
        run: |
          # Get mod version from root gradle.properties
          MOD_VERSION=$(grep '^version=' gradle.properties | cut -d'=' -f2)
          MOD_ID=$(grep '^id=' gradle.properties | cut -d'=' -f2)
          
          echo "mod_version=$MOD_VERSION" >> $GITHUB_OUTPUT
          echo "mod_id=$MOD_ID" >> $GITHUB_OUTPUT
          echo "mod_name=Carpet RMS Addition" >> $GITHUB_OUTPUT
          
          echo "Mod Version: $MOD_VERSION"
          echo "Mod ID: $MOD_ID" 
          echo "Minecraft Version: ${{ matrix.minecraft_version }}"
      
      - name: build for ${{ matrix.minecraft_version }}
        run: ./gradlew :${{ matrix.minecraft_version }}:build
      
      # For manual trigger: extract version and create release per minecraft version
      - name: extract version from gradle.properties
        if: github.event_name == 'workflow_dispatch'
        id: get_version
        run: |
          VERSION=${{ steps.version_info.outputs.mod_version }}
          MC_VERSION=${{ matrix.minecraft_version }}
          RELEASE_TAG="v${VERSION}-mc${MC_VERSION}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
          echo "Version extracted: $VERSION for MC $MC_VERSION"
      
      - name: generate changelog from latest commit
        if: github.event_name == 'workflow_dispatch'
        id: changelog
        run: |
          # Get the latest commit message
          CHANGELOG=$(git log -1 --pretty=format:"%s")
          
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="Release for Minecraft ${{ matrix.minecraft_version }}"
          else
            CHANGELOG="$CHANGELOG (Minecraft ${{ matrix.minecraft_version }})"
          fi
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: delete existing release and tag if exists
        if: github.event_name == 'workflow_dispatch'
        run: |
          RELEASE_TAG=${{ steps.get_version.outputs.release_tag }}
          echo "Checking for existing release with tag: $RELEASE_TAG"
          
          # Delete release if exists
          if gh release view "$RELEASE_TAG" >/dev/null 2>&1; then
            echo "Deleting existing release $RELEASE_TAG"
            gh release delete "$RELEASE_TAG" --yes
          else
            echo "No existing release found for $RELEASE_TAG"
          fi
          
          # Delete tag if exists
          if git rev-parse "$RELEASE_TAG" >/dev/null 2>&1; then
            echo "Deleting existing tag $RELEASE_TAG"
            git push --delete origin "$RELEASE_TAG" || true
            git tag -d "$RELEASE_TAG" || true
          else
            echo "No existing tag found for $RELEASE_TAG"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: create release with changelog
        if: github.event_name == 'workflow_dispatch'
        run: |
          RELEASE_TAG=${{ steps.get_version.outputs.release_tag }}
          MC_VERSION=${{ matrix.minecraft_version }}
          echo "Creating release for tag: $RELEASE_TAG"
          
          # Create tag and release with changelog
          gh release create "$RELEASE_TAG" \
            --title "${{ steps.version_info.outputs.mod_name }} v${{ steps.version_info.outputs.mod_version }} for MC $MC_VERSION" \
            --notes "${{ steps.changelog.outputs.changelog }}" \
            versions/$MC_VERSION/build/libs/*.jar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # For published release: upload assets for specific minecraft version
      - name: upload release assets
        if: github.event_name == 'release'
        run: |
          MC_VERSION=${{ matrix.minecraft_version }}
          # Check if this minecraft version should be uploaded for this release
          if [[ "${{ github.event.release.tag_name }}" == *"-mc$MC_VERSION" ]] || [[ "${{ github.event.release.tag_name }}" != *"-mc"* ]]; then
            echo "Uploading jar for MC $MC_VERSION to release ${{ github.event.release.tag_name }}"
            gh release upload ${{ github.event.release.tag_name }} versions/$MC_VERSION/build/libs/*.jar
          else
            echo "Skipping upload for MC $MC_VERSION as it doesn't match release tag pattern"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # Publish to Modrinth for specific minecraft version
      - name: publish to modrinth
        uses: Kir-Antipov/mc-publish@v3.3
        with:
          modrinth-id: ${{ vars.MODRINTH_ID }}
          modrinth-token: ${{ secrets.MODRINTH_TOKEN }}

          files: |
            versions/${{ matrix.minecraft_version }}/build/libs/*.jar

          name: ${{ format('{0} v{1} for MC {2}', 
                 steps.version_info.outputs.mod_name, 
                 steps.version_info.outputs.mod_version,
                 matrix.minecraft_version) }}
          version: ${{ format('v{0}-mc{1}', 
                    steps.version_info.outputs.mod_version,
                    matrix.minecraft_version) }}
          version-type: release

          loaders: fabric
          game-versions: |
            ${{ matrix.minecraft_version }}
          dependencies: |-
            carpet(required)